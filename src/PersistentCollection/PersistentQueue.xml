<?xml version="1.0"?>
<doc>
    <assembly>
        <name>PersistentCollection</name>
    </assembly>
    <members>
        <member name="T:PersistentCollection.PersistentDictionary`2">
            <summary>
            Persistent dictionary. Dictionary entries are backed on disk.
            Provides key-based access to data items.
            </summary>
        </member>
        <member name="P:PersistentCollection.PersistentDictionary`2.IsSynchronized">
            <summary>
            Boolean indicating if the object is thread-safe.
            </summary>
        </member>
        <member name="P:PersistentCollection.PersistentDictionary`2.SyncRoot">
            <summary>
            Object to use in synchronization across threads.
            </summary>
        </member>
        <member name="P:PersistentCollection.PersistentDictionary`2.Count">
            <summary>
            Number of entries in the dictionary.
            </summary>
        </member>
        <member name="P:PersistentCollection.PersistentDictionary`2.IsReadOnly">
            <summary>
            Boolean indicating if the dictionary is read-only. This will always be false.
            </summary>
        </member>
        <member name="P:PersistentCollection.PersistentDictionary`2.Keys">
            <summary>
            Collection of keys.
            </summary>
        </member>
        <member name="P:PersistentCollection.PersistentDictionary`2.Values">
            <summary>
            Collection of values.
            </summary>
        </member>
        <member name="P:PersistentCollection.PersistentDictionary`2.Item(`0)">
            <summary>
            Retrieve by key.
            </summary>
            <param name="key">Key.</param>
            <returns>Value associated with key.</returns>
        </member>
        <member name="M:PersistentCollection.PersistentDictionary`2.Add(`0,`1)">
            <summary>
            Add a key-value pair.
            </summary>
            <param name="key">Key.</param>
            <param name="value">Value.</param>
        </member>
        <member name="M:PersistentCollection.PersistentDictionary`2.Add(System.Collections.Generic.KeyValuePair{`0,`1})">
            <summary>
            Add a key-value pair.
            </summary>
            <param name="item">Key-value pair.</param>
        </member>
        <member name="M:PersistentCollection.PersistentDictionary`2.Clear">
            <summary>
            Clear the dictionary.
            </summary>
        </member>
        <member name="M:PersistentCollection.PersistentDictionary`2.Contains(System.Collections.Generic.KeyValuePair{`0,`1})">
            <summary>
            Check if the dictionary contains a key-value pair.
            </summary>
            <param name="item">Key-value pair.</param>
            <returns>True if exists.</returns>
        </member>
        <member name="M:PersistentCollection.PersistentDictionary`2.ContainsKey(`0)">
            <summary>
            Check if the dictionary contains a key.
            </summary>
            <param name="key">Key.</param>
            <returns>True if exists.</returns>
        </member>
        <member name="M:PersistentCollection.PersistentDictionary`2.CopyTo(System.Collections.Generic.KeyValuePair{`0,`1}[],System.Int32)">
            <summary>
            Copy the dictionary to an array.
            </summary>
            <param name="array">Array.</param>
            <param name="arrayIndex">Array index.</param>
        </member>
        <member name="M:PersistentCollection.PersistentDictionary`2.Remove(System.Collections.Generic.KeyValuePair{`0,`1})">
            <summary>
            Remove a key-value pair.
            </summary>
            <param name="item">Key-value pair.</param>
            <returns>True if removed.</returns>
        </member>
        <member name="M:PersistentCollection.PersistentDictionary`2.Remove(`0)">
            <summary>
            Remove a key.
            </summary>
            <param name="key">Key.</param>
            <returns>True if removed.</returns>
        </member>
        <member name="M:PersistentCollection.PersistentDictionary`2.TryGetValue(`0,`1@)">
            <summary>
            Try to get a value by key.
            </summary>
            <param name="key">Key.</param>
            <param name="value">Value.</param>
            <returns>True if successful.</returns>
        </member>
        <member name="M:PersistentCollection.PersistentDictionary`2.GetEnumerator">
            <summary>
            Get enumerator.
            </summary>
            <returns>Enumerator.</returns>
        </member>
        <member name="M:PersistentCollection.PersistentDictionary`2.#ctor(System.String)">
            <summary>
            Persistent dictionary.
            </summary>
            <param name="persistenceFile">Persistence file.</param>
        </member>
        <member name="M:PersistentCollection.PersistentDictionary`2.Dispose(System.Boolean)">
            <summary>
            Dispose.
            </summary>
            <param name="disposing">Disposing.</param>
        </member>
        <member name="M:PersistentCollection.PersistentDictionary`2.Dispose">
            <summary>
            Dispose.
            </summary>
        </member>
        <member name="T:PersistentCollection.PersistentList`1">
            <summary>
            Persistent list. List entries are backed on disk.
            Provides index-based access to data items.
            </summary>
        </member>
        <member name="P:PersistentCollection.PersistentList`1.IsSynchronized">
            <summary>
            Boolean indicating if the object is thread-safe.
            </summary>
        </member>
        <member name="P:PersistentCollection.PersistentList`1.SyncRoot">
            <summary>
            Object to use in synchronization across threads.
            </summary>
        </member>
        <member name="P:PersistentCollection.PersistentList`1.Count">
            <summary>
            Number of entries waiting in the list.
            </summary>
        </member>
        <member name="P:PersistentCollection.PersistentList`1.IsReadOnly">
            <summary>
            Boolean indicating if the list is read-only.  This will always be false.
            </summary>
        </member>
        <member name="P:PersistentCollection.PersistentList`1.Item(System.Int32)">
            <summary>
            Retrieve by index.
            </summary>
            <param name="index">Index.</param>
            <returns>Value at index.</returns>
        </member>
        <member name="M:PersistentCollection.PersistentList`1.IndexOf(`0)">
            <summary>
            Retrieve index of an item.
            </summary>
            <param name="item">Item.</param>
            <returns>Index.</returns>
        </member>
        <member name="M:PersistentCollection.PersistentList`1.Insert(System.Int32,`0)">
            <summary>
            Insert an item at a specific index.
            </summary>
            <param name="index">Index.</param>
            <param name="item">Item.</param>
        </member>
        <member name="M:PersistentCollection.PersistentList`1.RemoveAt(System.Int32)">
            <summary>
            Remove an item at a specific index.
            </summary>
            <param name="index">Index.</param>
        </member>
        <member name="M:PersistentCollection.PersistentList`1.Add(`0)">
            <summary>
            Add an item.
            </summary>
            <param name="item">Item.</param>
        </member>
        <member name="M:PersistentCollection.PersistentList`1.Clear">
            <summary>
            Clear the list.
            </summary>
        </member>
        <member name="M:PersistentCollection.PersistentList`1.Contains(`0)">
            <summary>
            Check if the list contains an item.
            </summary>
            <param name="item">Item.</param>
            <returns>True if exists.</returns>
        </member>
        <member name="M:PersistentCollection.PersistentList`1.CopyTo(`0[],System.Int32)">
            <summary>
            Copy the list to an array.
            </summary>
            <param name="array">Array.</param>
            <param name="arrayIndex">Array index.</param>
        </member>
        <member name="M:PersistentCollection.PersistentList`1.Remove(`0)">
            <summary>
            Remove an item.
            </summary>
            <param name="item">Item.</param>
            <returns>True if removed.</returns>
        </member>
        <member name="M:PersistentCollection.PersistentList`1.GetEnumerator">
            <summary>
            Get enumerator.
            </summary>
            <returns>Enumerator.</returns>
        </member>
        <member name="M:PersistentCollection.PersistentList`1.#ctor(System.String)">
            <summary>
            Persistent list.
            </summary>
            <param name="persistenceFile">Persistence file.</param>
        </member>
        <member name="M:PersistentCollection.PersistentList`1.Dispose(System.Boolean)">
            <summary>
            Dispose.
            </summary>
            <param name="disposing">Disposing.</param>
        </member>
        <member name="M:PersistentCollection.PersistentList`1.Dispose">
            <summary>
            Dispose.
            </summary>
        </member>
        <member name="T:PersistentCollection.PersistentQueue`1">
            <summary>
            Persistent generic queue. Queued entries are backed on disk.
            Data is dequeued from the queue in a first-in-first-out manner.
            </summary>
            <typeparam name="T">Type of elements in the queue</typeparam>
        </member>
        <member name="P:PersistentCollection.PersistentQueue`1.Count">
            <summary>
            Number of entries waiting in the queue.
            </summary>
        </member>
        <member name="P:PersistentCollection.PersistentQueue`1.IsSynchronized">
            <summary>
            Boolean indicating if the object is thread-safe.
            </summary>
        </member>
        <member name="P:PersistentCollection.PersistentQueue`1.SyncRoot">
            <summary>
            Object to use in synchronization across threads.
            </summary>
        </member>
        <member name="M:PersistentCollection.PersistentQueue`1.#ctor(System.String)">
            <summary>
            Persistent queue.
            </summary>
            <param name="persistenceFile">Persistence file.</param>
        </member>
        <member name="M:PersistentCollection.PersistentQueue`1.Dispose(System.Boolean)">
            <summary>
            Dispose.
            </summary>
            <param name="disposing">Disposing.</param>
        </member>
        <member name="M:PersistentCollection.PersistentQueue`1.Dispose">
            <summary>
            Dispose.
            </summary>
        </member>
        <member name="M:PersistentCollection.PersistentQueue`1.GetEnumerator">
            <summary>
            Get enumerator.
            </summary>
            <returns>Enumerator.</returns>
        </member>
        <member name="M:PersistentCollection.PersistentQueue`1.System#Collections#IEnumerable#GetEnumerator">
            <summary>
            Get enumerator.
            </summary>
            <returns>Enumerator.</returns>
        </member>
        <member name="M:PersistentCollection.PersistentQueue`1.CopyTo(`0[],System.Int32)">
            <summary>
            Copy the queue to an array.
            </summary>
            <param name="array">Array.</param>
            <param name="arrayIndex">Array index.</param>
        </member>
        <member name="M:PersistentCollection.PersistentQueue`1.CopyTo(System.Array,System.Int32)">
            <summary>
            Copy the queue to an array.
            </summary>
            <param name="array">Array.</param>
            <param name="arrayIndex">Array index.</param>
        </member>
        <member name="M:PersistentCollection.PersistentQueue`1.Clear">
            <summary>
            Clear the queue.
            </summary>
        </member>
        <member name="M:PersistentCollection.PersistentQueue`1.Contains(`0)">
            <summary>
            Check if the queue contains an item.
            </summary>
            <param name="item">Item.</param>
            <returns>True if exists.</returns>
        </member>
        <member name="M:PersistentCollection.PersistentQueue`1.Dequeue">
            <summary>
            Dequeue an item from the queue.
            </summary>
            <returns>Item.</returns>
        </member>
        <member name="M:PersistentCollection.PersistentQueue`1.Enqueue(`0)">
            <summary>
            Enqueue an item to the stack.
            </summary>
            <param name="item">Item.</param>
            <exception cref="T:System.NotImplementedException"></exception>
        </member>
        <member name="M:PersistentCollection.PersistentQueue`1.Peek">
            <summary>
            Peek at the next item to dequeue.
            </summary>
            <returns>Item.</returns>
        </member>
        <member name="M:PersistentCollection.PersistentQueue`1.ToArray">
            <summary>
            Create an array from the queue.
            </summary>
            <returns>Array.</returns>
        </member>
        <member name="M:PersistentCollection.PersistentQueue`1.TryPeek(`0@)">
            <summary>
            Try to peek.
            </summary>
            <param name="item">Item.</param>
            <returns>True if successful.</returns>
        </member>
        <member name="M:PersistentCollection.PersistentQueue`1.TryDequeue(`0@)">
            <summary>
            Try to dequeue.
            </summary>
            <param name="item">Item.</param>
            <returns>True if successful.</returns>
        </member>
        <member name="T:PersistentCollection.PersistentStack`1">
            <summary>
            Persistent stack.  Queued entries are backed on disk.
            Data is popped from the stack in a last-in-first-out manner.
            </summary>
        </member>
        <member name="P:PersistentCollection.PersistentStack`1.Count">
            <summary>
            Number of entries waiting in the stack.
            </summary>
        </member>
        <member name="P:PersistentCollection.PersistentStack`1.IsSynchronized">
            <summary>
            Boolean indicating if the object is thread-safe.
            </summary>
        </member>
        <member name="P:PersistentCollection.PersistentStack`1.SyncRoot">
            <summary>
            Object to use in synchronization across threads.
            </summary>
        </member>
        <member name="M:PersistentCollection.PersistentStack`1.#ctor(System.String)">
            <summary>
            Persistent stack.
            </summary>
            <param name="persistenceFile">Persistence file.</param>
        </member>
        <member name="M:PersistentCollection.PersistentStack`1.Dispose(System.Boolean)">
            <summary>
            Dispose.
            </summary>
            <param name="disposing">Disposing.</param>
        </member>
        <member name="M:PersistentCollection.PersistentStack`1.Dispose">
            <summary>
            Dispose.
            </summary>
        </member>
        <member name="M:PersistentCollection.PersistentStack`1.GetEnumerator">
            <summary>
            Get enumerator.
            </summary>
            <returns>Enumerator.</returns>
        </member>
        <member name="M:PersistentCollection.PersistentStack`1.System#Collections#IEnumerable#GetEnumerator">
            <summary>
            Get enumerator.
            </summary>
            <returns>Enumerator.</returns>
        </member>
        <member name="M:PersistentCollection.PersistentStack`1.Clear">
            <summary>
            Clear the stack.
            </summary>
        </member>
        <member name="M:PersistentCollection.PersistentStack`1.Contains(`0)">
            <summary>
            Check if the stack contains an item.
            </summary>
            <param name="item">Item.</param>
            <returns>True if exists.</returns>
        </member>
        <member name="M:PersistentCollection.PersistentStack`1.Peek">
            <summary>
            Peek at the top of the stack without removing from the stack.
            </summary>
            <returns>Item.</returns>
        </member>
        <member name="M:PersistentCollection.PersistentStack`1.Pop">
            <summary>
            Pop an item from the stack.
            </summary>
            <returns>Item.</returns>
        </member>
        <member name="M:PersistentCollection.PersistentStack`1.Push(`0)">
            <summary>
            Push an item to the stack.
            </summary>
            <param name="item">Item.</param>
        </member>
        <member name="M:PersistentCollection.PersistentStack`1.ToArray">
            <summary>
            Create an array from the stack.
            </summary>
            <returns>Array.</returns>
        </member>
        <member name="M:PersistentCollection.PersistentStack`1.CopyTo(`0[],System.Int32)">
            <summary>
            Copy queue contents to an array.
            </summary>
            <param name="array">Array.</param>
            <param name="arrayIndex">Array index.</param>
        </member>
        <member name="M:PersistentCollection.PersistentStack`1.CopyTo(System.Array,System.Int32)">
            <summary>
            Copy the queue to an array.
            </summary>
            <param name="array">Array.</param>
            <param name="arrayIndex">Array index.</param>
        </member>
        <member name="M:PersistentCollection.PersistentStack`1.TryPeek(`0@)">
            <summary>
            Try to peek.
            </summary>
            <param name="item">Item.</param>
            <returns>True if successful.</returns>
        </member>
        <member name="M:PersistentCollection.PersistentStack`1.TryPop(`0@)">
            <summary>
            Try to pop.
            </summary>
            <param name="item">Item.</param>
            <returns>True if successful.</returns>
        </member>
    </members>
</doc>
